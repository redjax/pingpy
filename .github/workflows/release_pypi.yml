## Create a new pypi test release when a Github release is created
name: publish to pypi test
on:
  pull_request:
    types:
      - labeled
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "*.md"
      - ".gitignore"
  
jobs:
  publish-pypi:
    name: |
      Build package with uv, publish to Pypi
    runs-on: ubuntu-latest
    ## Only on PRs with 'release' label
    if: ${{ github.event.label.name == 'release' }}
    strategy:
      matrix:
        version: 
          - "3.12"
    env:
      ## Configure a constant location for the uv cache
      UV_CACHE_DIR: ${{ github.workspace }}/.uv-cache
      UV_PUBLISH_USERNAME: "__token__"
      UV_PUBLISH_PASSWORD: ${{ secrets.PYPI_TOKEN }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: 0.4.24
          enable-cache: true
          ## Invalidate cache when lockfile changes
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ matrix.python-version }}

      - name: Display Python version
        run: uv run python -c "import sys; print(sys.version)"

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Build the project
        run: uv build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: ${{ github.workspace }}/dist/

      - name: Publish package
        run: uv publish

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
      - publish-pypi
    runs-on: ubuntu-latest
    ## Only on PRs with 'release' label
    if: ${{ github.event.workflow_run.conclusion == 'success' && contains(github.event.workflow_run.pull_requests[0].labels.*.name, 'release') }}
    strategy:
      matrix:
        version: 
          - "3.12"

    permissions:
      contents: write
      id-token: write

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ github.ref_name }}'
        --repo '${{ github.repository }}'
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'
